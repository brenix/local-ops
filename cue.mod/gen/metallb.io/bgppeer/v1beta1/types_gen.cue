// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f https://raw.githubusercontent.com/metallb/metallb/refs/heads/main/config/crd/bases/metallb.io_bgppeers.yaml

package v1beta1

import "strings"

// BGPPeer is the Schema for the peers API.
#BGPPeer: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "metallb.io/v1beta1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "BGPPeer"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// BGPPeerSpec defines the desired state of Peer.
	spec!: #BGPPeerSpec
}

// BGPPeerSpec defines the desired state of Peer.
#BGPPeerSpec: {
	bfdProfile?: string

	// EBGP peer is multi-hops away
	ebgpMultiHop?: bool

	// Requested BGP hold time, per RFC4271.
	holdTime?: string

	// Requested BGP keepalive time, per RFC4271.
	keepaliveTime?: string

	// AS number to use for the local end of the session.
	myASN: uint32

	// Only connect to this peer on nodes that match one of these
	// selectors.
	nodeSelectors?: [...{
		matchExpressions?: [...{
			key:      string
			operator: string
			values: [...string] & [_, ...]
		}]
		matchLabels?: {
			[string]: string
		}
	}]

	// Authentication password for routers enforcing TCP MD5
	// authenticated sessions
	password?: string

	// AS number to expect from the remote end of the session.
	peerASN: uint32

	// Address to dial when establishing the session.
	peerAddress: string

	// Port to dial when establishing the session.
	peerPort?: uint & <=16384

	// BGP router ID to advertise to the peer
	routerID?: string

	// Source address to use when establishing the session.
	sourceAddress?: string
}
