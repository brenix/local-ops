// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f https://raw.githubusercontent.com/metallb/metallb/refs/heads/main/config/crd/bases/metallb.io_ipaddresspools.yaml

package v1beta1

import "strings"

// IPAddressPool represents a pool of IP addresses that can be
// allocated
// to LoadBalancer services.
#IPAddressPool: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "metallb.io/v1beta1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "IPAddressPool"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// IPAddressPoolSpec defines the desired state of IPAddressPool.
	spec!: #IPAddressPoolSpec
}

// IPAddressPoolSpec defines the desired state of IPAddressPool.
#IPAddressPoolSpec: {
	// A list of IP address ranges over which MetalLB has authority.
	// You can list multiple ranges in a single pool, they will all
	// share the
	// same settings. Each range can be either a CIDR prefix, or an
	// explicit
	// start-end range of IPs.
	addresses: [...string]

	// AutoAssign flag used to prevent MetallB from automatic
	// allocation
	// for a pool.
	autoAssign?: bool | *true

	// AvoidBuggyIPs prevents addresses ending with .0 and .255
	// to be used by a pool.
	avoidBuggyIPs?: bool | *false

	// AllocateTo makes ip pool allocation to specific namespace
	// and/or service.
	// The controller will use the pool with lowest value of priority
	// in case of
	// multiple matches. A pool with no priority set will be used only
	// if the
	// pools with priority can't be used. If multiple matching
	// IPAddressPools are
	// available it will check for the availability of IPs sorting the
	// matching
	// IPAddressPools by priority, starting from the highest to the
	// lowest. If
	// multiple IPAddressPools have the same priority, choice will be
	// random.
	serviceAllocation?: {
		// NamespaceSelectors list of label selectors to select
		// namespace(s) for ip pool,
		// an alternative to using namespace list.
		namespaceSelectors?: [...{
			// matchExpressions is a list of label selector requirements. The
			// requirements are ANDed.
			matchExpressions?: [...{
				// key is the label key that the selector applies to.
				key: string

				// operator represents a key's relationship to a set of values.
				// Valid operators are In, NotIn, Exists and DoesNotExist.
				operator: string

				// values is an array of string values. If the operator is In or
				// NotIn,
				// the values array must be non-empty. If the operator is Exists
				// or DoesNotExist,
				// the values array must be empty. This array is replaced during a
				// strategic
				// merge patch.
				values?: [...string]
			}]

			// matchLabels is a map of {key,value} pairs. A single {key,value}
			// in the matchLabels
			// map is equivalent to an element of matchExpressions, whose key
			// field is "key", the
			// operator is "In", and the values array contains only "value".
			// The requirements are ANDed.
			matchLabels?: {
				[string]: string
			}
		}]

		// Namespaces list of namespace(s) on which ip pool can be
		// attached.
		namespaces?: [...string]

		// Priority priority given for ip pool while ip allocation on a
		// service.
		priority?: int

		// ServiceSelectors list of label selector to select service(s)
		// for which ip pool
		// can be used for ip allocation.
		serviceSelectors?: [...{
			// matchExpressions is a list of label selector requirements. The
			// requirements are ANDed.
			matchExpressions?: [...{
				// key is the label key that the selector applies to.
				key: string

				// operator represents a key's relationship to a set of values.
				// Valid operators are In, NotIn, Exists and DoesNotExist.
				operator: string

				// values is an array of string values. If the operator is In or
				// NotIn,
				// the values array must be non-empty. If the operator is Exists
				// or DoesNotExist,
				// the values array must be empty. This array is replaced during a
				// strategic
				// merge patch.
				values?: [...string]
			}]

			// matchLabels is a map of {key,value} pairs. A single {key,value}
			// in the matchLabels
			// map is equivalent to an element of matchExpressions, whose key
			// field is "key", the
			// operator is "In", and the values array contains only "value".
			// The requirements are ANDed.
			matchLabels?: {
				[string]: string
			}
		}]
	}
}
