// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f https://raw.githubusercontent.com/cilium/cilium/refs/heads/main/pkg/k8s/apis/cilium.io/client/crds/v2alpha1/ciliuml2announcementpolicies.yaml

package v2alpha1

import "strings"

// CiliumL2AnnouncementPolicy is a Kubernetes third-party resource
// which
// is used to defined which nodes should announce what services on
// the
// L2 network.
#CiliumL2AnnouncementPolicy: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "cilium.io/v2alpha1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "CiliumL2AnnouncementPolicy"
	metadata: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace?: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// Spec is a human readable description of a L2 announcement
	// policy
	spec!: #CiliumL2AnnouncementPolicySpec
}

// Spec is a human readable description of a L2 announcement
// policy
#CiliumL2AnnouncementPolicySpec: {
	// If true, the external IPs of the services are announced
	externalIPs?: bool

	// A list of regular expressions that express which network
	// interface(s) should be used
	// to announce the services over. If nil, all network interfaces
	// are used.
	interfaces?: [...string]

	// If true, the loadbalancer IPs of the services are announced
	//
	// If nil this policy applies to all services.
	loadBalancerIPs?: bool

	// NodeSelector selects a group of nodes which will announce the
	// IPs for
	// the services selected by the service selector.
	//
	// If nil this policy applies to all nodes.
	nodeSelector?: {
		// matchExpressions is a list of label selector requirements. The
		// requirements are ANDed.
		matchExpressions?: [...{
			// key is the label key that the selector applies to.
			key: string

			// operator represents a key's relationship to a set of values.
			// Valid operators are In, NotIn, Exists and DoesNotExist.
			operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

			// values is an array of string values. If the operator is In or
			// NotIn,
			// the values array must be non-empty. If the operator is Exists
			// or DoesNotExist,
			// the values array must be empty. This array is replaced during a
			// strategic
			// merge patch.
			values?: [...string]
		}]

		// matchLabels is a map of {key,value} pairs. A single {key,value}
		// in the matchLabels
		// map is equivalent to an element of matchExpressions, whose key
		// field is "key", the
		// operator is "In", and the values array contains only "value".
		// The requirements are ANDed.
		matchLabels?: {
			[string]: strings.MaxRunes(63) & =~"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$"
		}
	}

	// ServiceSelector selects a set of services which will be
	// announced over L2 networks.
	// The loadBalancerClass for a service must be nil or specify a
	// supported class, e.g.
	// "io.cilium/l2-announcer". Refer to the following document for
	// additional details
	// regarding load balancer classes:
	//
	// https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-class
	//
	// If nil this policy applies to all services.
	serviceSelector?: {
		// matchExpressions is a list of label selector requirements. The
		// requirements are ANDed.
		matchExpressions?: [...{
			// key is the label key that the selector applies to.
			key: string

			// operator represents a key's relationship to a set of values.
			// Valid operators are In, NotIn, Exists and DoesNotExist.
			operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

			// values is an array of string values. If the operator is In or
			// NotIn,
			// the values array must be non-empty. If the operator is Exists
			// or DoesNotExist,
			// the values array must be empty. This array is replaced during a
			// strategic
			// merge patch.
			values?: [...string]
		}]

		// matchLabels is a map of {key,value} pairs. A single {key,value}
		// in the matchLabels
		// map is equivalent to an element of matchExpressions, whose key
		// field is "key", the
		// operator is "In", and the values array contains only "value".
		// The requirements are ANDed.
		matchLabels?: {
			[string]: strings.MaxRunes(63) & =~"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$"
		}
	}
}
