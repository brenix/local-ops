// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni mod vendor crd -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/refs/heads/main/config/crd/bases/postgresql.cnpg.io_databases.yaml

package v1

import "strings"

// Database is the Schema for the databases API
#Database: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "postgresql.cnpg.io/v1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "Database"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// Specification of the desired Database.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	spec!: #DatabaseSpec
}

// Specification of the desired Database.
// More info:
// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
#DatabaseSpec: {
	// Maps to the `ALLOW_CONNECTIONS` parameter of `CREATE DATABASE`
	// and
	// `ALTER DATABASE`. If false then no one can connect to this
	// database.
	allowConnections?: bool

	// Maps to the `BUILTIN_LOCALE` parameter of `CREATE DATABASE`.
	// This
	// setting cannot be changed. Specifies the locale name when the
	// builtin provider is used. This option requires `localeProvider`
	// to
	// be set to `builtin`. Available from PostgreSQL 17.
	builtinLocale?: string
	cluster!: {
		// Name of the referent.
		// This field is effectively required, but due to backwards
		// compatibility is
		// allowed to be empty. Instances of this type with an empty value
		// here are
		// almost certainly wrong.
		// More info:
		// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
		name?: string
	}

	// Maps to the `COLLATION_VERSION` parameter of `CREATE DATABASE`.
	// This
	// setting cannot be changed.
	collationVersion?: string

	// Maps to the `CONNECTION LIMIT` clause of `CREATE DATABASE` and
	// `ALTER DATABASE`. How many concurrent connections can be made
	// to
	// this database. -1 (the default) means no limit.
	connectionLimit?: int

	// The policy for end-of-life maintenance of this database.
	databaseReclaimPolicy?: "delete" | "retain"

	// Maps to the `ENCODING` parameter of `CREATE DATABASE`. This
	// setting
	// cannot be changed. Character set encoding to use in the
	// database.
	encoding?: string

	// Ensure the PostgreSQL database is `present` or `absent` -
	// defaults to "present".
	ensure?: "present" | "absent"

	// The list of extensions to be managed in the database
	extensions?: [...{
		// Specifies whether an extension/schema should be present or
		// absent in
		// the database. If set to `present`, the extension/schema will be
		// created if it does not exist. If set to `absent`, the
		// extension/schema will be removed if it exists.
		ensure?: "present" | "absent"

		// Name of the extension/schema
		name!: string

		// The name of the schema in which to install the extension's
		// objects,
		// in case the extension allows its contents to be relocated. If
		// not
		// specified (default), and the extension's control file does not
		// specify a schema either, the current default object creation
		// schema
		// is used.
		schema?: string

		// The version of the extension to install. If empty, the operator
		// will
		// install the default version (whatever is specified in the
		// extension's control file)
		version?: string
	}]

	// Maps to the `ICU_LOCALE` parameter of `CREATE DATABASE`. This
	// setting cannot be changed. Specifies the ICU locale when the
	// ICU
	// provider is used. This option requires `localeProvider` to be
	// set to
	// `icu`. Available from PostgreSQL 15.
	icuLocale?: string

	// Maps to the `ICU_RULES` parameter of `CREATE DATABASE`. This
	// setting
	// cannot be changed. Specifies additional collation rules to
	// customize
	// the behavior of the default collation. This option requires
	// `localeProvider` to be set to `icu`. Available from PostgreSQL
	// 16.
	icuRules?: string

	// Maps to the `IS_TEMPLATE` parameter of `CREATE DATABASE` and
	// `ALTER
	// DATABASE`. If true, this database is considered a template and
	// can
	// be cloned by any user with `CREATEDB` privileges.
	isTemplate?: bool

	// Maps to the `LOCALE` parameter of `CREATE DATABASE`. This
	// setting
	// cannot be changed. Sets the default collation order and
	// character
	// classification in the new database.
	locale?: string

	// Maps to the `LC_CTYPE` parameter of `CREATE DATABASE`. This
	// setting
	// cannot be changed.
	localeCType?: string

	// Maps to the `LC_COLLATE` parameter of `CREATE DATABASE`. This
	// setting cannot be changed.
	localeCollate?: string

	// Maps to the `LOCALE_PROVIDER` parameter of `CREATE DATABASE`.
	// This
	// setting cannot be changed. This option sets the locale provider
	// for
	// databases created in the new cluster. Available from PostgreSQL
	// 16.
	localeProvider?: string

	// The name of the database to create inside PostgreSQL. This
	// setting cannot be changed.
	name!: string

	// Maps to the `OWNER` parameter of `CREATE DATABASE`.
	// Maps to the `OWNER TO` command of `ALTER DATABASE`.
	// The role name of the user who owns the database inside
	// PostgreSQL.
	owner!: string

	// The list of schemas to be managed in the database
	schemas?: [...{
		// Specifies whether an extension/schema should be present or
		// absent in
		// the database. If set to `present`, the extension/schema will be
		// created if it does not exist. If set to `absent`, the
		// extension/schema will be removed if it exists.
		ensure?: "present" | "absent"

		// Name of the extension/schema
		name!: string

		// The role name of the user who owns the schema inside
		// PostgreSQL.
		// It maps to the `AUTHORIZATION` parameter of `CREATE SCHEMA` and
		// the
		// `OWNER TO` command of `ALTER SCHEMA`.
		owner?: string
	}]

	// Maps to the `TABLESPACE` parameter of `CREATE DATABASE`.
	// Maps to the `SET TABLESPACE` command of `ALTER DATABASE`.
	// The name of the tablespace (in PostgreSQL) that will be
	// associated
	// with the new database. This tablespace will be the default
	// tablespace used for objects created in this database.
	tablespace?: string

	// Maps to the `TEMPLATE` parameter of `CREATE DATABASE`. This
	// setting
	// cannot be changed. The name of the template from which to
	// create
	// this database.
	template?: string
}
