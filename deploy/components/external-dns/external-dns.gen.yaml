apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    api-approved.kubernetes.io: https://github.com/kubernetes-sigs/external-dns/pull/2007
  name: dnsendpoints.externaldns.k8s.io
spec:
  group: externaldns.k8s.io
  names:
    kind: DNSEndpoint
    listKind: DNSEndpointList
    plural: dnsendpoints
    singular: dnsendpoint
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: |-
          DNSEndpoint is a contract that a user-specified CRD must implement to be used as a source for external-dns.
          The user-specified CRD should also have the status sub-resource.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: DNSEndpointSpec defines the desired state of DNSEndpoint
            properties:
              endpoints:
                items:
                  description: Endpoint is a high-level way of a connection between
                    a service and an IP
                  properties:
                    dnsName:
                      description: The hostname of the DNS record
                      type: string
                    labels:
                      additionalProperties:
                        type: string
                      description: Labels stores labels defined for the Endpoint
                      type: object
                    providerSpecific:
                      description: ProviderSpecific stores provider specific config
                      items:
                        description: ProviderSpecificProperty holds the name and value
                          of a configuration which is specific to individual DNS providers
                        properties:
                          name:
                            type: string
                          value:
                            type: string
                        type: object
                      type: array
                    recordTTL:
                      description: TTL for the record
                      format: int64
                      type: integer
                    recordType:
                      description: RecordType type of record, e.g. CNAME, A, AAAA,
                        SRV, TXT etc
                      type: string
                    setIdentifier:
                      description: Identifier to distinguish multiple records with
                        the same name and type (e.g. Route53 records with routing
                        policies other than 'simple')
                      type: string
                    targets:
                      description: The targets the DNS record points to
                      items:
                        type: string
                      type: array
                  type: object
                type: array
            type: object
          status:
            description: DNSEndpointStatus defines the observed state of DNSEndpoint
            properties:
              observedGeneration:
                description: The generation observed by the external-dns controller.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: external-dns
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/version: 0.17.0
    helm.sh/chart: external-dns-1.17.0
  name: external-dns-cloudflare
  namespace: network
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: external-dns
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/version: 0.17.0
    helm.sh/chart: external-dns-1.17.0
  name: external-dns-cloudflare
rules:
- apiGroups:
  - externaldns.k8s.io
  resources:
  - dnsendpoints
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - externaldns.k8s.io
  resources:
  - dnsendpoints/status
  verbs:
  - '*'
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - httproutes
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - grpcroutes
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - tlsroutes
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - tcproutes
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - udproutes
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: external-dns
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/version: 0.17.0
    helm.sh/chart: external-dns-1.17.0
  name: external-dns-cloudflare-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns-cloudflare
subjects:
- kind: ServiceAccount
  name: external-dns-cloudflare
  namespace: network
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: external-dns
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/version: 0.17.0
    helm.sh/chart: external-dns-1.17.0
  name: external-dns-cloudflare
  namespace: network
spec:
  ports:
  - name: http
    port: 7979
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: external-dns
    app.kubernetes.io/name: external-dns
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: external-dns
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/version: 0.17.0
    helm.sh/chart: external-dns-1.17.0
  name: external-dns-cloudflare
  namespace: network
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        secret.reloader.stakater.com/reload: external-dns-cloudflare-secret
      labels:
        app.kubernetes.io/instance: external-dns
        app.kubernetes.io/name: external-dns
    spec:
      automountServiceAccountToken: true
      containers:
      - args:
        - --log-level=info
        - --log-format=text
        - --interval=1m
        - --events
        - --source=crd
        - --source=gateway-httproute
        - --source=gateway-grpcroute
        - --source=gateway-tlsroute
        - --source=gateway-tcproute
        - --source=gateway-udproute
        - --policy=sync
        - --registry=txt
        - --txt-owner-id=default
        - --txt-prefix=k8s.
        - --domain-filter=brenix.com
        - --provider=cloudflare
        - --cloudflare-dns-records-per-page=1000
        - --cloudflare-proxied
        - --crd-source-apiversion=externaldns.k8s.io/v1alpha1
        - --crd-source-kind=DNSEndpoint
        - --gateway-name=external
        env:
        - name: CF_API_EMAIL
          valueFrom:
            secretKeyRef:
              key: CF_API_EMAIL
              name: external-dns-cloudflare
        - name: CF_API_KEY
          valueFrom:
            secretKeyRef:
              key: CF_API_KEY
              name: external-dns-cloudflare
        image: registry.k8s.io/external-dns/external-dns:v0.17.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 2
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: external-dns
        ports:
        - containerPort: 7979
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 65532
          runAsNonRoot: true
          runAsUser: 65532
      securityContext:
        fsGroup: 65534
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: external-dns-cloudflare
---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: external-dns-cloudflare
  namespace: network
spec:
  data:
  - remoteRef:
      key: CLOUDFLARE_API_EMAIL
    secretKey: CLOUDFLARE_API_EMAIL
  - remoteRef:
      key: CLOUDFLARE_API_KEY
    secretKey: CLOUDFLARE_API_KEY
  secretStoreRef:
    kind: ClusterSecretStore
    name: doppler
  target:
    name: external-dns-cloudflare
    template:
      data:
        CF_API_EMAIL: '{{ .CLOUDFLARE_API_EMAIL }}'
        CF_API_KEY: '{{ .CLOUDFLARE_API_KEY }}'
      engineVersion: v2
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app.kubernetes.io/instance: external-dns
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: external-dns
    app.kubernetes.io/version: 0.17.0
    helm.sh/chart: external-dns-1.17.0
  name: external-dns-cloudflare
  namespace: network
spec:
  endpoints:
  - path: /metrics
    port: http
  jobLabel: app.kubernetes.io/instance
  namespaceSelector:
    matchNames:
    - network
  selector:
    matchLabels:
      app.kubernetes.io/instance: external-dns
      app.kubernetes.io/name: external-dns
